/*
 * Editing Place for Windows
 * Selection Area for a Window (Selected Icon)
 */

// Window (and some Module) Variables 

// 'smallerClock', 68x68px
const unsigned char iconClock [] PROGMEM = {
	0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
	0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xf8, 
	0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 
	0x07, 0xc0, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 
	0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x03, 0xe0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x60, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00, 
	0x60, 0x00, 0x00, 0x70, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x78, 0x00, 0x03, 0xc0, 
	0x00, 0x00, 0x60, 0x00, 0x00, 0x3c, 0x00, 0x07, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x1c, 0x00, 
	0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 
	0x0f, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x07, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x60, 
	0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x03, 0x80, 0x38, 0x00, 0x00, 
	0x00, 0x60, 0x00, 0x00, 0x01, 0xc0, 0x38, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x01, 0xc0, 0x38, 
	0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x01, 0xc0, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 
	0xe0, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x60, 0x00, 
	0x00, 0x00, 0xe0, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0x00, 0x00, 0x00, 
	0x60, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 
	0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 
	0xe0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 
	0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x3f, 
	0xc0, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 
	0x00, 0x01, 0xfe, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x70, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 
	0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x38, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xc0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x38, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
	0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0e, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x03, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 
	0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 
	0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xc0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 
	0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x01, 
	0xf8, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xe0, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
	0x00, 0x00, 0x00, 0x00
};

// 'weather', 68x68px
const unsigned char iconWeather [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x03, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
	0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xe0, 0xff, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x0f, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x81, 0xfc, 
	0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
	0x00, 0x1f, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 
	0x00, 0x07, 0xff, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x01, 0xc0, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0xfc, 0x00, 0xf8, 0x00, 
	0x01, 0xe0, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x3c, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x01, 0xe0, 0x00, 
	0x1e, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x0f, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x07, 
	0x80, 0x00, 0x07, 0x80, 0x00, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x07, 0x80, 0x01, 0xe7, 0xe0, 
	0x00, 0x0f, 0x00, 0x00, 0x03, 0x80, 0x01, 0xc7, 0xf0, 0x00, 0x0e, 0x00, 0x00, 0x03, 0xf8, 0x01, 
	0xc7, 0xf0, 0x00, 0x0e, 0x00, 0x00, 0x01, 0xff, 0x83, 0xc0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x01, 
	0xff, 0xe3, 0x80, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x01, 0xff, 0xf7, 0x80, 0x00, 0x03, 0xfe, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x0f, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 
	0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x70, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x80, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 
	0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0x80, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0x80, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x38, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x1e, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 
	0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
	0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

// 'iconReminder', 68x68px
const unsigned char iconReminder [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf8, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x3f, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x38, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x70, 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x70, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0x70, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0x70, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0xce, 0x70, 0x3f, 
	0xff, 0xff, 0xff, 0xf0, 0x60, 0x71, 0xcf, 0x70, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x60, 0x70, 0xce, 
	0x30, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x60, 0x70, 0xc4, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 
	0x70, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x60, 0x70, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x1f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x70, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x79, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0x70, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0xc4, 0x70, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x71, 0xce, 0x30, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x60, 0x71, 0xcf, 
	0x30, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x60, 0x70, 0xce, 0x70, 0x2d, 0xff, 0xff, 0xff, 0x60, 0x60, 
	0x70, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x60, 0x70, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x3f, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x60, 0x70, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x70, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x7f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0xe0, 0x70, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0xce, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x71, 0xcf, 
	0x30, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x60, 0x71, 0xce, 0x70, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x60, 
	0x70, 0xc4, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x60, 0x70, 0x79, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x7f, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x60, 0x70, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x70, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xe0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x38, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
	0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfe, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

// Colors
uint16_t green = 0x0705;
uint16_t blue = 0x055f;
uint16_t purple = 0x781f;

// Parent Window Class
class Window{
  private:
    // Module Size - constant for all children windows
    int xPos = 9;
    int yPos = 75;
    uint16_t windowWidth = 303;
    uint16_t windowHeight = 110;
    uint16_t windowRadius = 15; 
    uint16_t windowColor = ST77XX_WHITE; 

    // Icon Variables
    int iconSize = 68; 
    int iconX = 24;
    int iconY = 96; 

  public: 
    virtual void drawWindow(){
      drawBorder();
    }

    virtual void clearWindow(){
      removeBorder(); 
    }

    virtual void forceClearScreen(){
      clearScreen(); 
    }

    virtual void update(){}

    virtual void updateClock(String newTime){} // Used for clock window

    void drawBorder(){
      tft.drawRoundRect(xPos, yPos, windowWidth, windowHeight, windowRadius, windowColor); 
    }

    void removeBorder(){
      // Redraw board in black
      tft.drawRoundRect(xPos, yPos, windowWidth, windowHeight, windowRadius, ST77XX_BLACK); 
    }

    void clearScreen(){
      tft.fillRoundRect(xPos, yPos, windowWidth, windowHeight, windowRadius, ST77XX_BLACK); 
    }

    void drawIcon(const unsigned char* icon, uint16_t color){
      tft.drawBitmap(iconX, iconY, icon, iconSize, iconSize, color);
    }
};

// These Windows are children of parent class Window
class WindowWeather : public Window{
  public: 
    void drawWindow() override {
      Window::drawBorder(); 
      Window::drawIcon(iconWeather, purple);
    }

    void clearWindow() override {
      Window::removeBorder();
      Window::drawIcon(iconWeather, ST77XX_BLACK);
    }
};

class WindowClock : public Window{
  private:
    // Get the Month
    String monthCalendar[12] = {
      "Jan", "Feb", "Mar",
      "Apr", "May", "Jun", 
      "Jul", "Aug", "Sep", 
      "Oct", "Nov", "Dec",
    };

    String daysOfWeek[7] = {
      "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
    };

    void printDates(){
      String month = DATE_TIME.substring(0,2); // Extract
      month =  monthCalendar[month.toInt() - 1];
      String dateVal = DATE_TIME.substring(2,4);
      dateVal = (dateVal[0] == '0') ? dateVal.substring(1,2) : dateVal; // Subtract the 0 if it shows up in the start.
      String dateName = daysOfWeek[DATE_TIME.substring(8,9).toInt() - 1]; // Sunday = 1
      dateOutput = dateName + ", " + month + " " + dateVal;
      drawText(dateOutput, 110, 96, 2);
      // String amPm = (DATE_TIME.substring(4, 6).toInt() < 12) ? "AM" : "PM";
      timeOutput = DATE_TIME.substring(4, 6)  + ":" + DATE_TIME.substring(6, 8) + " " + DATE_TIME.substring(9, 11); // 9-11 is AM/PM designator
      drawText(timeOutput, 110, 121, 4);
    }
 
  public: 
    String dateOutput = "";
    String timeOutput = "";
    bool prevConnected = false;

    void drawWindow() override {
      if(deviceConnected){
        printDates();
      } else {
        drawText("Disconnected", 110, 96, 2);
        drawText("No Data", 110, 121, 4);
      }

      Window::drawBorder(); 
      Window::drawIcon(iconClock, blue);
    }

    void clearWindow() override {
      Window::removeBorder();
      Window::drawIcon(iconClock, ST77XX_BLACK);
      if(prevConnected){
        drawShadowText(dateOutput, 110, 96, 2);
        drawShadowText(timeOutput, 110, 121, 4);    
      } else {
        drawShadowText("Disconnected", 110, 96, 2);
        drawShadowText("No Data", 110, 121, 4);
      }
    }

    void updateClock(String newTime) override{
      drawShadowText(dateOutput, 110, 96, 2);
      drawShadowText(timeOutput, 110, 121, 4);    

      printDates();
    }

    void update() override{
      Serial.println("TIME BT UPDATE");
      Window::forceClearScreen();
      // tft.fillRoundRect(centerPos, selectedY, selectedWidth, selectedHeight, rectRadius, moduleColor);
      // clearWindow();
      // // Update prevConnected AFTER we clear the window
      prevConnected = deviceConnected; 
      drawWindow();
    }
};

class WindowReminder : public Window{
  private:
    int triangleY; // Starts at the first index
    int tabY[3] = {75, 111, 147};
    int SELECTION = 0; 
 
    // Class for individual tabs
    class ReminderTab{
      private:
        uint16_t tabX = 35;
        uint16_t tabY;
        uint16_t tabTextX = 45;
        uint16_t tabWidth = 279;
        uint16_t tabHeight = 34;
        uint16_t tabRadius = 10;
        String tabTitle = "Reminder";
        bool selected;

      public: 
        ReminderTab(int yPos, bool isSelected){
          tabY = yPos; 
          selected = isSelected;
        }

        void update(String title){
          tabTitle = title;
        }

        void setSelected(bool isSelected){
          selected = isSelected; 
        }

        void drawTab(){
          // if(tabTitle = "")
          uint16_t color = ST77XX_WHITE;
          uint16_t textYVal = tabY + 10; 

          if(selected){
            color = green;
          }

          tft.drawRoundRect(tabX, tabY, tabWidth, tabHeight, 10, color); 
          drawColorText(tabTitle, tabTextX, textYVal, 2, color);
        }
    };
    
    ReminderTab Reminder1 = ReminderTab(75, true); 
    ReminderTab Reminder2 = ReminderTab(111, false); 
    ReminderTab Reminder3 = ReminderTab(147, false); 

    ReminderTab *Reminders[3] = {&Reminder1, &Reminder2, &Reminder3};

    void drawSidePointer(int index){ // 17 y difference
      triangleY = tabY[index];
      tft.fillTriangle(24, triangleY,
                        30, triangleY + 17,
                        24, triangleY + 34,
                        green);
    }

    void hideSidePointer(int index){ // 17 y difference
      triangleY = tabY[index];
      tft.fillTriangle(24, triangleY,
                        30, triangleY + 17,
                        24, triangleY + 34,
                        ST77XX_BLACK);
    }

    void setSelected(int newIdx){
      hideSidePointer(SELECTION); // Hide the previous selection
      // Set the selected idx to be highlighted (selected)
      for(int i = 0; i < 3; i++){
        // Highlight selected
        if(i == newIdx){
          Reminders[i]->setSelected(true);
        }else{
          Reminders[i]->setSelected(false);
        }
        Reminders[i]->drawTab();
      }
      drawSidePointer(newIdx); // And draw the pointer too :D
      SELECTION = newIdx; // Update new selection
    }

    void drawMenu(){
      // drawSidePointer(1);
      Reminder1.update("Reminder 1");
      Reminder2.update("Reminder 2");
      Reminder3.update("Reminder 3");
      setSelected(0);
    }

  public: 
    void drawWindow() override {
      // Window::drawBorder();
      hidePointer();
      drawMenu();
    }

    void clearWindow() override {
      Window::removeBorder();
      Window::drawIcon(iconReminder, ST77XX_BLACK);
    }
};

